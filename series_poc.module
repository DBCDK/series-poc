<?php //

/**
 * @file
 * Enables search and navigation using simple navigation api.
 */



function series_poc_menu()
{
  $items = array();

  $items['serier/%'] = array(
    'title' => 'Series',
    'page callback' => 'series_poc_search',
    'access arguments' => array('access content'),
  );

  $items['serier/%/%'] = array(
    'title' => 'Series',
    'page callback' => 'series_poc_search',
    'access arguments' => array('access content'),
  );

  $items['serier'] = array(
    'title' => 'Series',
    'page callback' => 'series_poc_search',
    'access arguments' => array('access content'),
  );

  return $items;
}



function series_poc_theme($existing, $type, $theme, $path)
{
  return array(
    'series_poc_main' => array(
      'variables' => array(
        'items' => NULL,
        'title' => NULL,
        'creators' => NULL,
        'abstract' => NULL,
        'covers' => NULL,
      ),
      'template' => 'series-main-content',
      'path' => $path . '/templates',
    ),

    'series_poc_main_all' => array(
      'variables' => array(
        'items' => NULL
      ),
      'template' => 'series-main-content-all',
      'path' => $path . '/templates',
    ),

    'series_poc_breadcrumbs' => array(
      'variables' => array(
        'items' => NULL
      ),
      'template' => 'series-breadcrumb',
      'path' => $path . '/templates',
    ),

    'series_poc_menu' => array(
      'variables' => array(
        'items' => NULL
      ),
      'template' => 'series-menu',
      'path' => $path . '/templates',
    ),

    'series_poc_item' => array(
      'variables' => array(
        'item' => NULL,
      ),
      'template' => 'series-item',
      'path' => $path . '/templates',
    ),

    'series_poc_all_item' => array(
      'variables' => array(
        'item' => NULL,
      ),
      'template' => 'series-all-item',
      'path' => $path . '/templates',
    ),

    'series_poc_page' => array(
      'variables' => array(
        'items' => NULL,
        'breadcrumb' => NULL,
        'menu' => NULL,
      ),
      'template' => 'series-poc-page',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function series_poc_ctools_plugin_directory($module, $plugin)
{
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

function series_poc_search()
{
  $category = '';
  $parameters = drupal_get_query_parameters();

  if (isset($parameters['series'])) {
    $series = series_poc_get_works_in_series($parameters['series']);
    $items = series_poc_handle_series($series);
    $menu = series_poc_handle_menu_series($series);
    $bread_crumb = series_poc_get_breadcrumb($series);
  } else if (isset($parameters['universe'])) {
  } else {
    $all_series = series_poc_get_all_series();
    file_put_contents("/var/www/data/debug/series2.txt", print_r($all_series , TRUE), FILE_APPEND);
    $items = series_poc_show_all_series($all_series);
    file_put_contents("/var/www/data/debug/series3.txt", print_r($items  , TRUE), FILE_APPEND);
    $menu = series_poc_handle_menu_categories();
    file_put_contents("/var/www/data/debug/series4.txt", print_r($menu  , TRUE), FILE_APPEND);
    $bread_crumb = series_poc_get_breadcrumb();
  }


  drupal_add_js(drupal_get_path('module', 'ting_covers') . '/js/ting-covers.js');
  return theme('series_poc_page', array('items' => $items, 'breadcrumb' => $bread_crumb, 'menu' => $menu, 'title' => '',));
}

function series_poc_get_breadcrumb($series = null)
{
  $links = array();
  $links[] = l('Serier', '/serier');
  if (!isset($series)) {
    $parameters = drupal_get_query_parameters();

    if (isset($parameters['category'])) {
      $options = array(
        'html' => TRUE,
        'query' => array('category' => $parameters['category']),
      );
      $links[] = l($parameters['category'], '/serier', $options);
    }
  } else {
    $category = series_poc_get_category_series($series);
    $options = array(
      'html' => TRUE,
      'query' => array('category' => $category),
    );
    $links[] = l(ucFirst($category), '/serier', $options);
    if (isset($series->universe_title)) {
      $options = array(
        'html' => TRUE,
        'query' => array('universe' => $series->universe_title),
      );
      $links[] = l($series->universe_title, '/serier', $options);
    }
    $options = array(
      'html' => TRUE,
      'query' => array('series' => $series->title),
    );
    $links[] = l($series->title, '/serier', $options);
  }
  return implode('<span class="series_poc-breadcrumb-icon"></span>', $links);
}




function series_poc_handle_menu_series($series)
{
  $category = series_poc_get_category_series($series);
  $series_menu_item = '<ul class="series-menu-sub-level series-menu-sub-level-active">' . series_poc_make_series_menu_item($series->title, 'series', true) . '</ul>';
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/menu10.txt", print_r($series_menu_item, TRUE), FILE_APPEND);
  if (isset($series->universe_title)) {
    $univers_menu_item = '<ul class="series-menu-sub-level">' . series_poc_make_series_menu_item($series->universe_title, 'universe', true, $series_menu_item) . '</ul>';
    return series_poc_handle_menu($category, $univers_menu_item);
  } else {
    return series_poc_handle_menu($category, $series_menu_item);
  }
}

function series_poc_get_category_series($series)
{
  foreach (series_poc_get_category_data() as $key => $title) {
    if ($key == $series->title) {
      return $title['category'];
    }
  }
}

function series_poc_handle_menu_categories()
{
  $parameters = drupal_get_query_parameters();

  if (isset($parameters['category'])) {
    $category = $parameters['category'];
    return series_poc_handle_menu($category);
  } else {
    return series_poc_handle_menu();
  }
}

function series_poc_handle_menu($category = '', $subitems = '')
{
  $menu_items = [];
  $items = [
    'romaner' => 'serier?category=romaner',
    'krimi' => 'serier?category=krimi',
    'fantasy' => 'serier?category=fantasy',
    'fag' => 'serier?category=fag',
    'børn' => 'serier?category=børm',
  ];

  foreach ($items as $key => $item) {
    if ($key == $category) {
      $menu_items[] = series_poc_make_menu_item($item, $key, true, $subitems);
    } else {
      $menu_items[] = series_poc_make_menu_item($item, $key);
    }
  }

  //file_put_contents("/var/www/drupalvm/drupal/web/debug/menu1.txt", print_r($menu_items, TRUE), FILE_APPEND);
  return theme('series_poc_menu', array('items' => $menu_items));
}

function series_poc_make_series_menu_item($title, $type, $active = false, $subitems = '')
{
  $class = 'series-menu-item';
  if ($active) {
    $class .= ' series-menu-item-active';
  }
  $options = array(
    'html' => TRUE,
    'query' => array($type => $title),
  );
  $link = l($title, 'serier', $options);

  //file_put_contents("/var/www/drupalvm/drupal/web/debug/menu2.txt", print_r($link, TRUE), FILE_APPEND);
  return '<li class="' . $class . '">' . $link . $subitems  . '</li>';
}

function series_poc_make_menu_item($item, $key, $active = false, $subitems = '')
{
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/menu3.txt", print_r($key, TRUE), FILE_APPEND);
  $class = 'series-menu-item';
  if ($active) {
    $class .= ' series-menu-item-active';
    if ($subitems == '') {
      $class .= ' series-menu-item-selected';
    }
  }
  $options = array(
    'html' => TRUE,
    'query' => array('category' => $key),
  );
  $link = l(ucfirst($key), 'serier', $options);

  //file_put_contents("/var/www/drupalvm/drupal/web/debug/menu2.txt", print_r($link, TRUE), FILE_APPEND);
  return '<li class="' . $class . '">' . $link . $subitems . '</li>';
}

function series_poc_show_all_series($series)
{
  $items = [];
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series7.txt", print_r($series, TRUE), FILE_APPEND);
  if (isset($series)) {
    foreach ($series as $series_item) {
      if (!empty($series_item)) {
        $items[] = series_poc_show_all_series_item($series_item);
      }
    }
  }
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series10.txt", print_r($items, TRUE), FILE_APPEND);
  return theme('series_poc_main_all', array('items' => $items));
}



function series_poc_show_all_series_item($series_item)
{
  $item = new SeriesObject();

  $object = new CoverObject();
  //$object->id = $series_item->work_id;
  $object->title = $series_item->title;
  $object->creators = [];
  $i = 1;

  foreach (array_slice($series_item->pids, 0, 3) as $pid) {
    $object->id = $pid;
    $item->cover .= '<div class="ting-series-all-cover-' . $i . '">' . series_poc_render_cover_series($object, $series_item->title) . '</div>';
    $i++;
  }

  $options = array(
    'html' => TRUE,
    'query' => ['series' => $series_item->title],
  );

  $item->title = l($series_item->title, 'serier', $options);
  $item->abstract = $series_item->description;
  if (isset($series_item->universe_title)) {
    $item->unviverse = $series_item->universe_title;
  } else {
    $item->unviverse = '';
  }

  return theme('series_poc_all_item', array('item' => $item));
}

function series_poc_handle_series($series)
{
  $items = [];
  file_put_contents("/var/www/drupalvm/drupal/web/debug/series7.txt", print_r($series, TRUE), FILE_APPEND);
  //$series->objects = series_poc_remove_duplicatesS($series);
  if (isset($series->objects)) {
    foreach ($series->objects as $series_item) {
      $items[] = series_poc_handle_series_item($series_item, $series->title);
    }
  }

  $object = new CoverObject();
  $object->title = $series->title;
  $object->creators = [];
  $i = 1;

  $covers = '';
  foreach (array_slice($series->pids, 0, 3) as $pid) {
    $object->id = $pid;
    $covers .= '<div class="ting-series-all-cover-' . $i . '">' . series_poc_render_cover_series($object, $series->title) . '</div>';
    $i++;
  }

  $title = $series->title;
  $abstract = $series->description;
  $universe = null;
  if (isset($series->universe_title)) {
    $series->universe_title;
    $options = array(
      'html' => TRUE,
      'query' => array('universe' => $series->universe_title),
    );
    if (isset($series->number_in_universe)) {
      $prefix = 'Del ' . $series->number_in_universe . ' af: ';
    } else {
      $prefix = 'Del af: ';
    }
    $universe = l($prefix . $series->universe_title . ' universet', '/serier', $options);
  }
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series10.txt", print_r($items, TRUE), FILE_APPEND);
  return theme('series_poc_main', array('items' => $items, 'title' => $title, 'abstract' => $abstract, 'universe' => $universe, 'covers' => $covers));
}

function series_poc_remove_duplicatesS($series)
{
  $objects = [];
  $number = 0;
  foreach ($series->objects as $series_item) {
    $series_number = series_poc_get_number_in_series($series_item, $series->title);
    if (!($series_number == $number)) {
      $objects[] = $series_item;
    }
    $number = $series_number;
  }
  return $objects;
}

function series_poc_handle_series_item($series_item, $series_title)
{
  $item = new SeriesObject();

  $object = new CoverObject();
  $object->id = $series_item->work_id;
  $object->title = $series_item->work_metadata->title_full[0];
  if (isset($series_item->work_metadata->creator)) {
    $object->creators = $series_item->work_metadata->creator;
    $item->creators = $series_item->work_metadata->creator[0];
  } else {
    $object->creators = array();
    $item->creators = '';
  }

  $item->cover = series_poc_render_cover($object);
  $url = 'ting/object/' . $object->id;
  $item->title = l($series_item->work_metadata->title_full[0], $url);
  $item->abstract = $series_item->work_metadata->abstract[0];
  $item->number = series_poc_get_number_in_series($series_item, $series_title);

  return theme('series_poc_item', array('item' => $item));
}

function series_poc_get_number_in_series($series_item, $series_title)
{
  if (isset($series_item->series_memberships)) {
    foreach ($series_item->series_memberships as $member_ship) {
      $vars = get_object_vars($member_ship);
      if (isset($vars[$series_title])) {
        return implode(', ', $vars[$series_title]);
      }
    }
  }
}





function series_poc_process_results($results)
{
  $objects = array();
  foreach ($results->response->docs as $result_object) {
    $object = new SimpleSearchObject();
    $object->id = $result_object->pid;
    $object->title = $result_object->title;
    if (isset($result_object->creator)) {
      $object->creators = $result_object->creator[0];
    } else {
      $object->creators = '';
    }
    $object->pids = $result_object->pid;
    if (isset($object->language)) {
      $object->language = $result_object->language;
    }
    $objects[$object->id] = $object;
  }
  return $objects;
}

function series_poc_render_cover_series($object, $title)
{
  $url = 'serier';

  $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ting_search_carousel')));
  $options = array(
    'html' => TRUE,
    'attributes' => array('title' => $object->title),
    'query' => ['series' => $title],
  );
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series12.txt", print_r($image, TRUE), FILE_APPEND);
  return l($image, $url, $options);
}

function series_poc_render_cover($object)
{
  $url = 'ting/object/' . $object->id;
  $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ting_search_carousel')));
  $options = array(
    'html' => TRUE,
    'attributes' => array('title' => $object->title),
  );
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series12.txt", print_r($image, TRUE), FILE_APPEND);
  return l($image, $url, $options);
}



function series_poc_request($action, $parameters)
{
  $service_url = 'https://series-poc.demo.dbc.dk/';
  $service_url .= $action . '?' . $parameters;
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series2.txt", print_r($service_url, TRUE), FILE_APPEND);
  $curl = curl_init($service_url);
  curl_setopt(
    $curl,
    CURLOPT_HTTPHEADER,
    array(
      'Content-Type: application/json',
      'Accept: application/json'
    )
  );
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  $curl_response = curl_exec($curl);
  if ($curl_response === false) {
    $info = curl_getinfo($curl);
    curl_close($curl);
  }
  curl_close($curl);
  $decoded = json_decode($curl_response);
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/simple3.txt", print_r($decoded, TRUE), FILE_APPEND);
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/simple6.txt", print_r($curl_response, TRUE), FILE_APPEND);
  if (isset($decoded->response->status) && $decoded->response->status == 'ERROR') {
    //TODO Handle error
  }
  return  $decoded;
}

function series_poc_multi_request($action, $parameters)
{
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series24.txt", print_r($parameters, TRUE), FILE_APPEND);
  $requests = [];
  foreach ($parameters as $parameter) {
    $service_url = 'https://series-poc.demo.dbc.dk/';
    $service_url .= $action . '?' . $parameter;
    $requests[] = buildCurlRequest($service_url);
  }
  try {
    $results = curl_multi($requests);
    $decoded_results = [];
    if (is_array($results)) {
      foreach ($results as $result) {
        $decoded_results[] = json_decode($result);
      }
    } else {
      $decoded_results[] = json_decode($results);
    }
    //file_put_contents("/var/www/drupalvm/drupal/web/debug/series9.txt", print_r($results, TRUE), FILE_APPEND);
    return $decoded_results;
  } catch (Exception $e) {
    //file_put_contents("/var/www/drupalvm/drupal/web/debug/series-exception.txt", print_r($e, TRUE), FILE_APPEND);
  }
}

function buildCurlRequest($url)
{
  $curl_session = array();
  $curl_session['endpoint'] = $url;
  // Array of cURL options. See the documentation for curl_setopt for 
  // details on what options are available.

  $curl_options = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_HTTPHEADER => array(
      'Content-Type: application/json',
      'Accept: application/json'
    )
  );

  $curl_session['options'] = $curl_options;
  return $curl_session;
}

// function series_poc_process_facets($results)
// {
//   $facets = array();
//   foreach ($results->response->facets as $facet) {
//     $facets[$facet[0]] = $facet[1];
//   }
//   //file_put_contents("/var/www/drupalvm/drupal/web/debug/simple7.txt", print_r($facets, TRUE), FILE_APPEND);
//   return $facets;
// }

function series_poc_get_all_series()
{
  try {
  $parameters = drupal_get_query_parameters();

  if (isset($parameters['category'])) {
    $category = $parameters['category'];
    $all_series = [];
    foreach (series_poc_get_category_data() as $key => $title) {
      if ($title['category'] == $category) {
        $all_series[] = $key;
      }
    }
  } else {
    $results = series_poc_request('series-all', '');
    $all_series = $results->series;
  }

  file_put_contents("/var/www/data/debug/series21.txt", print_r($all_series, TRUE), FILE_APPEND);
  if (isset($results->statusCode)) {
    return null;
  } else {
    foreach ($all_series as $series) {
      $parameters[] = 'title=' . rawurlencode($series);
    }
    file_put_contents("/var/www/data/debug/series1.txt", print_r($parameters, TRUE), FILE_APPEND);
    $series_data = series_poc_multi_request('series', $parameters);
    
    //file_put_contents("/var/www/drupalvm/drupal/web/debug/series17.txt", print_r($series_data, TRUE), FILE_APPEND);
    return $series_data;
  }
} catch (Exception $e) {
  file_put_contents("/var/www/drupalvm/drupal/web/debug/series-exception.txt", print_r($e, TRUE), FILE_APPEND);
}
}

function series_poc_get_universe($title)
{
  $parameters = 'title=' . rawurlencode($title);
  $results = series_poc_request('universe', $parameters);
  if (isset($results->statusCode)) {
    return null;
  } else {
    return $results;
  }
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series1.txt", print_r($results , TRUE), FILE_APPEND);
}

function series_poc_get_series($title)
{
  $parameters = 'title=' . rawurlencode($title);
  $results = series_poc_request('series', $parameters);
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series5.txt", print_r($results, TRUE), FILE_APPEND);
  if (isset($results->statusCode)) {
    return null;
  } else {
    return $results;
  }
}

function series_poc_get_works_in_series($title)
{
  $parameters = [];
  $objects = [];
  $series = series_poc_get_series($title);
  if (isset($series) && isset($series->pids)) {
    $startTime = explode(' ', microtime());
    foreach ($series->pids as $pid) {
      $parameters[] = 'workid=' . $pid;
    }
    $results = series_poc_multi_request('pid', $parameters);
    $stopTime = explode(' ', microtime());
    $time = floatval(($stopTime[1] + $stopTime[0]) - ($startTime[1] + $startTime[0]));
    //file_put_contents("/var/www/drupalvm/drupal/web/debug/series8.txt", print_r($time, TRUE), FILE_APPEND);
    if (isset($results)) {
      $series->objects = $results;
    }
    //file_put_contents("/var/www/drupalvm/drupal/web/debug/series6.txt", print_r($results, TRUE), FILE_APPEND);
  }
  return $series;
}

function series_poc_get_work($pid)
{
  $parameters = 'workid=' . $pid;
  $results = series_poc_request('pid', $parameters);
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/series5.txt", print_r($results, TRUE), FILE_APPEND);
  if (isset($results->statusCode)) {
    return null;
  } else {
    return $results;
  }
}



class SeriesObject
{
  public $title;
  public $creators;
  public $cover;
  public $number;
  public $language;
  public $abstract;
  public $actions;
  public $universe;
}

class CoverObject
{
  public $title;
  public $creators;
  public $id;

  public function getCreators()
  {
    return ($this->creators);
  }

  public function getTitle()
  {
    return $this->title;
  }
}

function series_poc_get_category_data()
{
  $data = array(
    'Aske i munden, sand i skoen' => array(
      'category' => 'romaner'
    ),

    'Renée Ballard-serien' => array(
      'category' => 'krimi'
    ),

    'Harry Bosch-serien' => array(
      'category' => 'krimi'
    ),

    'Harry Potter' => array(
      'category' => 'fantasy'
    ),

    'The Harry Potter series' => array(
      'category' => 'fantasy'
    ),

    'Fantastic beasts (film)' => array(
      'category' => 'fantasy'
    ),

    'Fantastic beasts (filmmanuskript)' => array(
      'category' => 'fantasy'
    ),

    'Harry Potter (film)' => array(
      'category' => 'fantasy'
    ),

    'WOW - vild viden' => array(
      'category' => 'fag'
    ),

    'De 5' => array(
      'category' => 'børn'
    ),

    'De 5 (samling)' => array(
      'category' => 'børn'
    ),

    'Tænkepauser' => array(
      'category' => 'fag'
    ),

    'Totemdyrenes fald' => array(
      'category' => 'fantasy'
    ),

    'Totemdyrenes saga' => array(
      'category' => 'fantasy'
    ),

    'Kongens ranger' => array(
      'category' => 'fantasy'
    ),

    'Våbenbrødre' => array(
      'category' => 'fantasy'
    ),

    'Skyggens lærling' => array(
      'category' => 'fantasy'
    ),

    'Den sidste inkal' => array(
      'category' => 'fantasy'
    ),

    'Før inkalen' => array(
      'category' => 'fantasy'
    ),

    'Teknofædrene' => array(
      'category' => 'romaner'
    ),

    'Megalex' => array(
      'category' => 'romaner'
    ),

    'Metabaronernes kaste - Castaka' => array(
      'category' => 'romaner'
    ),

    'Metabaronernes kaste' => array(
      'category' => 'romaner'
    ),

    'John Difools hemmlighed' => array(
      'category' => 'romaner'
    ),

    'Inkalen' => array(
      'category' => 'fantasy'
    ),

    'Skøre facts' => array(
      'category' => 'fag'
    ),

    'Vide verden' => array(
      'category' => 'fag'
    ),

    'Rose-serien' => array(
      'category' => 'børn'
    ),

    'Cirklen åbnes' => array(
      'category' => 'børn'
    ),

    'Løvindens sang' => array(
      'category' => 'børn'
    ),

    'Magiens cirkel' => array(
      'category' => 'fantasy'
    ),

    'Asta' => array(
      'category' => 'børn'
    ),

    'Hårdes saga' => array(
      'category' => 'børn'
    ),

    'Wimpy Kid-serien' => array(
      'category' => 'børn'
    ),

    'Rowleys dagbog' => array(
      'category' => 'børn'
    ),

    'Den der lever stille' => array(
      'category' => 'romaner'
    ),

    'Skyggernes kniv (tegneserie)' => array(
      'category' => 'fantasy'
    ),

    'His dark materials (tegneserie)' => array(
      'category' => 'fantasy'
    ),

    'His dark materials' => array(
      'category' => 'fantasy'
    ),

    'His dark materials (Sæson 1)' => array(
      'category' => 'fantasy'
    ),

    'Det gyldne kompas (tegneserie)' => array(
      'category' => 'fantasy'
    ),

    'Forestillinger om Støv' => array(
      'category' => 'fantasy'
    ),

    'The book of dust' => array(
      'category' => 'fantasy'
    ),

    'Det gyldne kompas' => array(
      'category' => 'fantasy'
    ),
  );
  return $data;
}
